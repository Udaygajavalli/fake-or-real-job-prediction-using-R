library(lubridate)
library(data.table)
library(tidytext)
library(tm)
library(SnowballC)
library(wordcloud)
library(stopwords)
library(e1071)
data_corpus <- Corpus(VectorSource(data$description))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df))
sparse_data_df$fraudulent <- data$fraudulent
colnames(sparse_data_df) <- make.unique(colnames(sparse_data_df), sep = "_")
set.seed(123)
split_data <- createDataPartition(y = sparse_data_df$fraudulent, times = 1, p = 0.85, list= FALSE)
train_data <- sparse_data_df[split_data, ]
test_data <- sparse_data_df[-split_data, ]
train_data$fraudulent = as.factor(train_data$fraudulent)
test_data$fraudulent = as.factor(test_data$fraudulent)
set.seed(1111)
trcontrol<- trainControl(method = "repeatedcv", number=2, repeats=1, search="random", verboseIter = TRUE)
grid <-data.frame(mtry = c(100))
set.seed(1122)
rf_model <- train(fraudulent ~ ., method = "rf", data = train_data, ntree = 200, trControl = trcontrol,tuneGrid = grid)
rf_model
rf_prediction <- predict(rf_model, newdata = test_data)
confMatrix_rf <- confusionMatrix(rf_prediction, test_data$fraudulent)
confMatrix_rf
library(tidytext)
library(wordcloud2)
fraud_job <- sparse_data_df %>% filter(fraudulent == 1) %>% group_by_all()
DF <- tidy(fraud_job)
DF <- DF %>% select(column, max)
colnames(DF) <- c("Word", "Frequency")
DF <- DF %>% arrange(desc(Frequency)) %>% slice(1:500)
DF$Frequency <- as.integer(DF$Frequency)
DF <- data.frame(DF)
wordcloud2(DF, size=1.6, color='random-light', backgroundColor="black")
install.packages('wordcloud2')
library(tidytext)
library(wordcloud2)
fraud_job <- sparse_data_df %>% filter(fraudulent == 1) %>% group_by_all()
DF <- tidy(fraud_job)
DF <- DF %>% select(column, max)
colnames(DF) <- c("Word", "Frequency")
DF <- DF %>% arrange(desc(Frequency)) %>% slice(1:500)
DF$Frequency <- as.integer(DF$Frequency)
DF <- data.frame(DF)
wordcloud2(DF, size=1.6, color='random-light', backgroundColor="black")
non_fraud_job <- sparse_data_df %>% filter(fraudulent == 0) %>% group_by_all()
DF_1 <- tidy(non_fraud_job)
DF_1 <- DF_1 %>% select(column, max)
colnames(DF_1) <- c("Word", "Frequency")
DF_1 <- DF_1 %>% arrange(desc(Frequency)) %>% slice(1:500)
DF_1$Frequency <- as.integer(DF_1$Frequency)
DF_1 <- data.frame(DF_1)
wordcloud2(DF_1, size=1.6, color='random-light', backgroundColor="black")
non_fraud_job <- sparse_data_df %>% filter(fraudulent == 0) %>% group_by_all()
DF_1 <- tidy(non_fraud_job)
DF_1 <- DF_1 %>% select(column, max)
colnames(DF_1) <- c("Word", "Frequency")
DF_1 <- DF_1 %>% arrange(desc(Frequency)) %>% slice(1:500)
DF_1$Frequency <- as.integer(DF_1$Frequency)
DF_1 <- data.frame(DF_1)
wordcloud2(DF_1, size=1.6, color='random-light', backgroundColor="black")
View(test_data)
View(train_data)
View(data)
str = 'Food52, a fast-growing, James Beard Award-winning online food community and crowd-sourced and curated recipe hub, is currently interviewing full- and part-time unpaid interns to work in a small team of editors, executives, and developers in its New York City headquarters.Reproducing and/or repackaging existing Food52 content for a number of partner sites, such as Huffington Post, Yahoo, Buzzfeed, and more in their various content management systemsResearching blogs and websites for the Provisions by Food52 Affiliate ProgramAssisting in day-to-day affiliate program support, such as screening affiliates and assisting in any affiliate inquiriesSupporting with PR &amp; Events when neededHelping with office administrative work, such as filing, mailing, and preparing for meetingsWorking with developers to document bugs and suggest improvements to the siteSupporting the marketing and executive staff'
str
View(split_data)
View(sparse_data_df)
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
prediction <- predict(rf_model, newdata = sparse_data)
}
pred(str)
pred.function(str)
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df)
prediction <- predict(rf_model, newdata = sparse_data)
print(prediction)
}
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df)
prediction <- predict(rf_model, newdata = sparse_data_df)
print(prediction)
}
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
prediction <- predict(rf_model, newdata = sparse_data)
print(prediction)
}
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df))
prediction <- predict(rf_model, newdata = sparse_data_df)
print(prediction)
}
pred.function(str)
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords(kind = "en"))
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df))
prediction <- predict(rf_model, newdata = sparse_data_df)
print(rf_model)
}
pred.function(str)
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords())
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df))
prediction <- predict(rf_model, newdata = sparse_data_df)
print(rf_model)
}
pred.function(str)
## Prediction Function
pred.function <- function(str){
data_corpus <- Corpus(VectorSource(str))
data_corpus <- tm_map(data_corpus, removePunctuation)
data_corpus <- tm_map(data_corpus, removeWords, stopwords())
data_corpus <- tm_map(data_corpus, stripWhitespace)
data_corpus <- tm_map(data_corpus, stemDocument)
frequencies <- DocumentTermMatrix(data_corpus)
sparse_data <- removeSparseTerms(frequencies, 0.995)
sparse_data_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_data_df) <- make.names(colnames(sparse_data_df))
prediction <- predict(rf_model, newdata = sparse_data_df)
print(prediction)
}
pred.function(str)
str
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(data_corpus, removePunctuation)
corpus <- tm_map(data_corpus, removeWords, stopwords())
corpus <- tm_map(data_corpus, stripWhitespace)
corpus <- tm_map(data_corpus, stemDocument)
freq <- DocumentTermMatrix(data_corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse_data))
colnames(sparse_df) <- make.names(colnames(sparse_df))
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(data_corpus, removePunctuation)
corpus <- tm_map(data_corpus, removeWords, stopwords())
corpus <- tm_map(data_corpus, stripWhitespace)
corpus <- tm_map(data_corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(data_corpus, removePunctuation)
corpus <- tm_map(data_corpus, removeWords, stopwords())
corpus <- tm_map(data_corpus, stripWhitespace)
corpus <- tm_map(data_corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(frequencies, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
str
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
rf_prediction
corpus <- Corpus(VectorSource(str))
corpus
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
## colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
## sparse_df <- as.data.frame(as.matrix(sparse))
## colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
## Prediction Function
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
## colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
View(sparse_df)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
View(corpus)
View(corpus)
View(corpus)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
View(prediction)
View(sparse_df)
View(freq)
View(Corpus())
View(corpus)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
## colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = sparse_df)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(prediction)
## Prediction Function
str
## Prediction Function
str[1]
## Prediction Function
str[0]
## Prediction Function
str[1]
## Prediction Function
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(prediction)
sparse_data_df$fraudulent
train_data$fraudulent
test_data$fraudulent
View(split_data)
View(split_data)
prediction <- predict(rf_model, newdata = str)
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
prediction <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(prediction)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
pred <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(pred)
View(data$description)
View(spaese_data_df)
View(sparse_data_df)
str = "Responsible for assisting in the direction and administration of the planning, preparation, production and control of all culinary operations in the hotels continuing effort to deliver outstanding guest service and financial profitability.As Executive Sous Chef, you would be responsible for assisting in the direction and administration of the planning, preparation, production and control of all culinary operations in the hotel's continuing effort to deliver outstanding guest service and financial profitability. Specifically, you would be responsible for performing the following tasks to the highest standards:Assist the Executive Chef in the direction and oversight of all culinary operations, to include, but not limited to, preparation and production of all hotel meals, food quality and presentation, compliance with all safety and sanitation standards and regulation, team member productivity and performance, implementation of policies and procedures, cost controls and overall profitabilityAssist the Executive Chef by interacting with guests and clients to monitor and assess satisfaction trends, evaluate and address issues and make improvements accordinglyAssist the Executive Chef in creating and implementing menu selections for special banquet themes and events based on current food trends and regional tastes in partnership with the Executive Chef and Director of Food and Beverage, as neededEnsure compliance with federal, state, local and company health, safety, sanitation and alcohol awareness standardsMonitor and develop team member performance to include, but not limited to, providing supervision, conducting counseling and assisting with evaluations, training, scheduling and assigning work and delivering recognition and reward"
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
pred <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(pred)
fraudulent
train_data$fraudulent
View(train_data)
View(frequencies)
train_data
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
##colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
pred <- predict(rf_model, newdata = as.data.frame(sparse_df))
print(pred)
View(sparse_data_df)
str
View(sparse_df)
corpus <- Corpus(VectorSource(str))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus)
sparse <- removeSparseTerms(freq, 0.995)
sparse_df <- as.data.frame(as.matrix(sparse))
colnames(sparse_df) <- make.names(colnames(sparse_df))
##colnames(sparse_df) <- make.unique(colnames(sparse_df), sep = "_")
pred <- predict(rf_model, newdata = sparse_df)
print(pred)
.libPaths("D://RStudio//R")
library(shiny); runApp('shiny_input.R')
.libPaths("D://RStudio//R")
library(shiny); runApp('shiny_input.R')
runApp('shiny_input.R')
.libPaths("D://RStudio//R")
plumber::plumb(file='plumber.R')$run()
